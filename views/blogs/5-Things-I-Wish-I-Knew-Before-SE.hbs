<div class="blog"></div>
<h1 class="pad-left pad-right">Top 5 Things I Wish I Knew Before Starting My Degree In Software Engineering</h1>
<div class="pad-left blog-heading"></div>
<h4 class="pad-left pad-right blog-subhead">A simple guide for starting your software engineering degree right</h4>
<img src="https://producelikeapro.com/blog/wp-content/uploads/2019/03/Do-You-Need-an-Audio-Engineering-Degree_3.png" class="pad-left pad-right blog-image" />
<p class="pad-left pad-right blog-paragraph">
    So you’re going to college and majoring in software engineering, huh? That’s good, that’s great. I’m sure you’re
    wondering what you need to do to prepare.
    <br><br>
    What languages should you learn?
    <br><br>
    What skills should you hone?
    <br><br>
    All of these questions have been burning inside you begging to come out. You just want to succeed. You just want to
    start off strong.
    <br><br>
    Well I’m here to tell you that you’re probably thinking of the wrong things entirely! 
    <br><br>
    I don't have any specific languages I wish I knew, or specific topics I wished I studied. 
    <br><br>
    It's something else.
    <br><br>
    I have a few different ideas for what you should
    learn before majoring in software engineering. I’m going to share with you
    the top 5 things I wish I knew before starting my degree in Software Engineering.
    <br><br>
    </p>
    <h2 class="pad-left pad-right">1. Do research into what you’re going to do after college</h2>
    <p class="pad-left pad-right blog-paragraph">
    A lot of people might say, you’re only a freshman, you have some time to think things out. I disagree! If you start
    now, you will be miles ahead of your peers in having an idea for what you want to do with your life. Do you want to
    make mobile apps? Do you want to develop desktop applications? You probably don’t know exactly what you want to do
    with your life, and that’s completely ok! That’s something you don’t need to know right now, but there are tons of
    different career paths and specialties that someone in software engineering can take, so start doing research now in
    what you think you might like. Start learning about what different specialties actually entail. It also gives you
    the added benefit of knowing which software engineering electives you want to take later on in school. Trust me, you
    don’t want to get to graduation and not know what kind of software you want to create.
    <br><br>
    And I get it, you don't even know where to start. That's why I wrote a list of <a href="/blog?blog=Common-Career-Paths-for-SE" onclick="return myScroll();">Career Paths for a Software Engineering Student.</a>
    </p>
    <h2 class="pad-left pad-right">2. Pay attention in class.</h2>
    <p class="pad-left pad-right blog-paragraph">
    Especially in those classes early on, you’re gonna wanna make sure you have those concepts down. You’d be surprised
    how many juniors and seniors I talk to that don’t understand those concepts that we learn in our introduction
    classes. It might seem a little boring, but once you start to understand stuff like object oriented programming, and
    WHY we use it, then you’re able to start coming up with ways that you can do it yourself. Right now, you probably
    can’t really do much coding wise without a tutorial or strict guidelines, but as you get to your later years, there
    won’t be as many guidelines. You’ll be more on your own for specific implementation details. Having a solid base is
    what will allow you to learn how to do this.
    <br><br>
    I know you have your freedom finally and you have the option of skipping class. I know that the 8am you have three times a week is not fun. You still have to go to class and make sure you pay attention. Your professor might not be the greatest, but oftentimes the perks of going to class even when you professor isn't perfect is that you are able to learn what you need to learn. When a professor talks about arrays, or hashmaps, or linked lists, odds are they will come back at another point in your career.
    <br><br>
    Even if you aren't learning the material in class, still go so that you can get a grasp of what you need to study outside of class. That's what will put you ahead of your peers both in your grades and your understanding of the material.
    <br><br>
    </p>
    <h2 class="pad-left pad-right">3. Get an internship</h2>
    <p class="pad-left pad-right blog-paragraph">
    Quite possibly the best thing I could do for myself and my understanding of software engineering was getting an
    internship. It allows you to gain an understanding into how software is actually developed in a professional
    setting, and gives you a lot more confidence in your skills. Of course, this step may say “Get an internship,” but
    it can also be defined as improving your professional self. Do research into how to make a great resume, how to
    conduct yourself in interviews, and what employers are looking for. Start working on your soft skills and charisma.
    Getting an internship is tough, but it is totally doable for software engineering. When you figure out the path to
    getting the job you want, it gives a good outline for what you should be doing with your life.
    <br><br>
    There are tons of tips and tricks out there on how to get an internship, and it takes a good bit of work to actually get one. The benefits of it are numerous, however, and it is well worth the effort to sift through all of the tips on <a href="/blog?blog=3" onclick="return myScroll();">how to get a software engineering internship</a>.
    <br><br>
    I remember coming back to school after my internship over the summer before my Junior year. I had a class where the entire semester was dedicated toward creating one project. They dubbed the class as the class that turns you from a programmer into a software engineer. So much of the content within that class was stuff that I had already learned during my internship!
    <br><br>
    The benefits are numerous, and if you start becoming the best candidate early on, you will be setting yourself up for success in the long run.
    <br><br>
    </p>
    <h2 class="pad-left pad-right">4. Do side projects</h2>
    <p class="pad-left pad-right blog-paragraph">
    One of the things I recommend to people the most is to work on side projects. It doesn’t matter what project you
    work on, just try to find a project that you won’t have to force yourself to work on. And something I thought early
    on was that when you started a side project that you had to entirely do it on your own. That isn’t true! It’s
    absolutely ok to follow a tutorial for your project because then hopefully by the end of it, you will have learned
    how to add on new things into this project. These are the kinds of skills that you won’t learn through your
    schoolwork. It’s also really awesome when you can go up to a recruiter and say, “this is what I worked on entirely
    because I’m passionate about coding, and this subject, so I wanted to combine my skills.”
    <br><br>
    Plus, I mean, it's kind of fun to have an idea and bring it to life. That's part of the core values of this site: create. You learn useful skills along the way, have the potential to impact other people's lives, and it looks great to recruiters. That's why I recommend finding a project or two to work on.
    <br><br>
    And if you don't have the time available to consistently work on your project, that's completely fine. Something valuable to a recruiter could be that you have experience managing a code base over a long period of time.
    <br><br>
    Make sure you use version control like Git. Git allows you to store changes for your code and keep backups for your work. You can also more easily collaborate with others, and I can tell you right now, pretty much every company you might want to work for will use Git. Plus, one of my favorite things to do is go back and look at the code I wrote for older projects and think about ways to optimize it. Or I just laugh at how foolish I was.
    <br><br>
    </p>
    <h2 class="pad-left pad-right">5. Keep doing what you’re doing</h2>
    <p class="pad-left pad-right blog-paragraph">
    Huh? I came to this video to look for new things I could do with myself! Alright, alright, it’s a little bit of a
    cop out finally, but it’s also entirely serious. Getting a job or degree in software engineering is hard. Sometimes
    your code won’t work. Sometimes you won’t get the job offer you wanted. Sometimes you won’t do well on an exam.
    Sometimes things won’t go exactly the way you expected them to. You just have to know that you are on the right
    path. The fact that you’ve even watched this video this long proves that you are doing something right. So keep on
    doing what you’re doing. Keep trying to learn how to improve yourself. Keep on the grind. You’ll hear from people
    here and there that you need to learn this or that. You need to do this in order to succeed. Some of it is true,
    some of it isn’t. It’s your job to figure out what works for you. You’re still early on, so probably the most
    important advice that someone could give you is to trust yourself.
    <br><br>
    Don't beat yourself up if you find yourself struggling. What I've listed above will level up your skills and make you better, and although it might be hard, your future self will thank you.
    <br><br>
    You can do it.
    <br><br>
    </p>
    <p class="pad-left pad-right blog-paragraph">
    Those are my top 5 things I wish I knew before starting my software engineering degree. Have you already started your degree? Send me an email in the contact form and let me know the tips you wish you could tell your past self!
    <br><br>
    Thank you for reading, and good luck getting your Bachelor's!
    </p>
    <br><br>
</p>